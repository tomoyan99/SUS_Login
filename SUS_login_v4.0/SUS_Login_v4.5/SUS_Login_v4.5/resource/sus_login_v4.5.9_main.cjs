/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "puppeteer":
/*!****************************!*\
  !*** external "puppeteer" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("puppeteer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("dns");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "readline":
/*!***************************!*\
  !*** external "readline" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("readline");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("timers");

/***/ }),

/***/ "./classes/SelectOptions.js":
/*!**********************************!*\
  !*** ./classes/SelectOptions.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SelectOptions: () => (/* binding */ SelectOptions)\n/* harmony export */ });\n/* harmony import */ var _util_checkInternet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/checkInternet.js */ \"./util/checkInternet.js\");\n/**\r\n * 選択メニュー用のクラス\r\n * */\r\n\r\n\r\nclass SelectOptions {\r\n    //エラー時などに描画を割り込ませるとき画面が再描画ループに陥らないようにするため\r\n    static wasChanged = false;\r\n    constructor() {\r\n\r\n        //メインメニューの定義\r\n        this.head = [];\r\n        this.body = [];\r\n        this.foot = [];\r\n\r\n        //デフォルトメニューの定義\r\n        this.default = {\r\n            head:[],\r\n            body:[],\r\n            foot:[],\r\n        }\r\n        //エラーメニューの定義\r\n        this.error = {\r\n            head:[],\r\n            body:[],\r\n            foot:[],\r\n        }\r\n        this.errorStatus = \"\"; //エラー状態\r\n    }\r\n    static async build(args,errargs= undefined) {\r\n        const SO = new SelectOptions();\r\n        //デフォルトのメニューの保存用\r\n        SO.default = {\r\n            head:args.head,\r\n            body:args.body,\r\n            foot:args.foot,\r\n        }\r\n        //エラー用メニューが引数に与えられている場合は適用\r\n        if (errargs !== undefined){\r\n            SO.error = {\r\n                head:errargs.head,\r\n                body:errargs.body,\r\n                foot:errargs.foot,\r\n            };\r\n        }\r\n        //エラーステータスの更新\r\n        await SO.setStatus();\r\n\r\n        //ネットワーク接続初期条件によってメニューに設定するものを変える\r\n        await SO.setMenu(SO.errorStatus);\r\n        return SO;\r\n    }\r\n    //ネットワークの接続状況\r\n    static get networkConnected() {\r\n        return (0,_util_checkInternet_js__WEBPACK_IMPORTED_MODULE_0__.isNetConnected)()\r\n    }\r\n    //現在のメニューを返す\r\n    get Menu(){\r\n        return {\r\n            head:this.head, //メニューヘッダー\r\n            body:this.body, //メニューボディー\r\n            foot:this.foot, //メニューフッター\r\n        }\r\n    }\r\n\r\n    //エラー状態か否かを切り替え\r\n    static async switchStatus(){\r\n        this.wasChanged = !this.wasChanged;\r\n    }\r\n\r\n    //エラーステータスの設定\r\n    async setStatus(){\r\n        this.errorStatus = await (0,_util_checkInternet_js__WEBPACK_IMPORTED_MODULE_0__.isNetConnected)()?\"normal\":\"error\";\r\n        return this;\r\n    }\r\n\r\n    //メニューの設定\r\n    async setMenu(mode=\"normal\"){\r\n        if (mode === \"normal\"){\r\n            this.head = this.default.head;\r\n            this.body = this.default.body;\r\n            this.foot = this.default.foot;\r\n        }else if (mode === \"error\"){\r\n            this.head = this.error.head;      //メニューヘッダー\r\n            this.body = this.error.body;       //メニューボディー\r\n            this.foot = this.error.foot;      //メニューフッター\r\n        }\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack://sus_login/./classes/SelectOptions.js?");

/***/ }),

/***/ "./login.js":
/*!******************!*\
  !*** ./login.js ***!
  \******************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   login: () => (/* binding */ login)\n/* harmony export */ });\n/* harmony import */ var puppeteer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! puppeteer */ \"puppeteer\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _util_input_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/input.js */ \"./util/input.js\");\n/* harmony import */ var _util_choise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/choise.js */ \"./util/choise.js\");\n/* harmony import */ var _util_today_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/today.js */ \"./util/today.js\");\n/* harmony import */ var _util_control_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/control.js */ \"./util/control.js\");\n/* harmony import */ var _util_pause_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/pause.js */ \"./util/pause.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var _util_checkInternet_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/checkInternet.js */ \"./util/checkInternet.js\");\n/* harmony import */ var timers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! timers */ \"timers\");\n/* harmony import */ var _classes_SelectOptions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./classes/SelectOptions.js */ \"./classes/SelectOptions.js\");\n/* harmony import */ var _util_importJSON_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util/importJSON.js */ \"./util/importJSON.js\");\n/* harmony import */ var _util_makeSchedule_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./util/makeSchedule.js */ \"./util/makeSchedule.js\");\n/* harmony import */ var _util_crypt_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./util/crypt.js */ \"./util/crypt.js\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! os */ \"os\");\n\r\n/*\r\n\t[SUS_login]\r\n\t諏訪理科のsola,sclassに自動ログインしたり、eucを自動で入力してくれるスクリプト。\r\n*/\r\n\r\n/*\r\n\t使用モジュール\r\n\t\tpuppeteer:自動入力やクリックを担う\r\n\t\tfs       :jsonファイルの取り込み\r\n\t\tinput    :標準入力全般。パスワードの入力にも用いる\r\n\t\tchoice   :選択肢の表示とキー選択\r\n\t\ttoday    :日付関連モジュール\r\n\t\tcontrol  :コンソールの色等の制御\r\n\t\tpause    :ポーズコマンドの再現\r\n    child_process:windowsコマンドの実行\r\n    checkInternet:ネットワーク接続の確認\r\n        timers   :インターバルの削除\r\n    SelectOptions:選択肢選択用のクラス\r\n    importJSON   :JSONをimportしやすいモジュール\r\n\r\n*/\r\n //pupeteerのインポート\r\n //fsのインポート\r\n //標準入力・パス入力\r\n //十字キー選択\r\n //日付関連\r\n //コンソール制御関連\r\n //PAUSEコマンドの再現\r\n //コンソールコマンドの実行\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* sleep関数 */\r\nconst sleep = msec => new Promise(resolve => setTimeout(resolve, msec));\r\n\r\n/* writeJSON関数 */\r\nfunction writeJSON(dir, data) {\r\n    if (typeof data === \"string\"){\r\n        (0,fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync)(dir, data);\r\n    }else{\r\n        (0,fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync)(dir, JSON.stringify(data));\r\n    }\r\n}\r\n\r\n/*\r\n\tlogin関数\r\n\tここでは開きたいサイトのコマンドを標準入力で受け取ったり、\r\n\topenSUS関数の実行をしたりしてます。\r\n*/\r\nasync function login(version = \"\",data,sola_link) {\r\n    /*\r\n        十字キー選択によって、[sclass],[sola],[sclass,sola],[euc]の判定を行い、\r\n        eucならさらに番号の入力を求める。\r\n        [list]を選択すると履修中の科目リストが表示され、選択すると対応したsolaのページurlを設定\r\n        エラーがなければopenSUSを実行する。\r\n    */\r\n    let EUC = 0;//EUC番号を格納する変数\r\n\r\n    data.miss_count = 0; //\tEUC登録ミスの回数カウント\r\n    data.access_dot = {\r\n        waitmsec:1000,\r\n        max_quant:3\r\n    }//アクセス待機用のドット表示パラメータ\r\n\r\n    //sola_link.jsonの中身\r\n    let page_name = {\"bf\": [], \"af\": []};//sola_linkから科目名のみ取り出し\r\n    let page_url = {\"bf\": [], \"af\": []};//sola_linkからurlのみ取り出し\r\n    let page_link = {};\r\n\r\n    /* コピー実行部 */\r\n    page_name.bf = sola_link.bf.map((d) => d.name);\r\n    page_name.af = sola_link.af.map((d) => d.name);\r\n    page_url.bf = sola_link.bf.map((d) => d.url);\r\n    page_url.af = sola_link.af.map((d) => d.url);\r\n    /* 科目名をキー、 値をurlとしたテーブルの作成*/\r\n    //前期\r\n    for (let i = 0; i < sola_link.bf.length; i++) {\r\n        page_link[page_name.bf[i]] = page_url.bf[i];\r\n    }\r\n    //後期\r\n    for (let i = 0; i < sola_link.af.length; i++) {\r\n        page_link[page_name.af[i]] = page_url.af[i];\r\n    }\r\n    const default_solaURL = data.sola.url;\r\n    //一定時間操作がなければプロセスを終了\r\n    const timeout = new function timeOut(){\r\n        //開始時間\r\n        this.start=new Date().valueOf();\r\n        //タイムリミット\r\n        this.limit_msec = ()=>{\r\n            const time = {\r\n                days    :1,  //日\r\n                hours   :0,  //時\r\n                minutes :0,  //分\r\n                seconds :0,  //秒\r\n            }\r\n            function getMilliSec(t){\r\n                const D_msec = t.days*24*60*60*1000;\r\n                const H_msec = t.hours*60*60*1000;\r\n                const M_msec = t.minutes*60*1000;\r\n                const S_msec = t.seconds*1000;\r\n                return D_msec+H_msec+M_msec+S_msec;\r\n            }\r\n            return getMilliSec(time);//制限時間 時 分 秒 ミリ秒(デフォルトで40分)\r\n        };\r\n        this.end =this.start +  this.limit_msec();\r\n    };\r\n\r\n    setInterval(()=>{\r\n        if (new Date().valueOf() > timeout.end){\r\n            console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_yellow}一時間操作がなかったためタイムアウトしました。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);//表示されない。\r\n            process.exit(0);\r\n        }\r\n    },1000);\r\n\r\n    //ネットワーク接続判定\r\n    let network_ID = null;\r\n\r\n    //メニューループ\r\n    selectcommand:\r\n        do {\r\n            let state = undefined;\r\n            //network_IDが更新されていたときnetwork_IDのインターバルを削除\r\n            if (network_ID !== null){\r\n                (0,timers__WEBPACK_IMPORTED_MODULE_9__.clearInterval)(network_ID);\r\n            }\r\n            data.sola.url = default_solaURL;\r\n            //選択用のargs\r\n            const homemenu = {\r\n                head: [\r\n                    [`SUS_login_v${version}`],\r\n                    [`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_green}十字キーで開きたい項目を選択してね${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`,`インターネット接続状況：${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_green}良好${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}`],\r\n                    [\"\"]\r\n                ],\r\n                body: [\r\n                    [\"1.euc\", \">>logs\", \">>images\"],\r\n                    [\"2.sola\", \">>List\",\"@ SOLAリスト更新\"],\r\n                    [\"3.sclass\"],\r\n                    [\"4.sclassとsola\",\">>wasa\"],\r\n                    [\"5.履修仮組みツール\"],\r\n                    [`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red}6.QUIT${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`]\r\n                ],\r\n                foot: [\r\n                    [\"\"],\r\n                    [\"選択?>\"],\r\n                ]\r\n            };\r\n            const errhomemenu =  {\r\n                head: [\r\n                    [`SUS_login_v${version}`],\r\n                    [`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_green}十字キーで開きたい項目を選択してね${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`, `インターネット接続状況：${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_red}不良${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}`],\r\n                    [`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_yellow}※ ネットワークが繋がっていないため${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red}QUIT${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}以外の操作を拒絶中です！${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`],\r\n                    [\"\"]\r\n                ],\r\n                body: [\r\n                    [\"1.euc\", \">>logs\", \">>images\"],\r\n                    [\"2.sola\", \">>List\",\"@ SOLAリスト更新\"],\r\n                    [\"3.sclass\"],\r\n                    [\"4.sclassとsola\"],\r\n                    [\"5.履修仮組みツール\"],\r\n                    [`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red}6.QUIT${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`]\r\n                ],\r\n                foot: [\r\n                    [\"\"],\r\n                    [\"選択?>\"],\r\n                ]\r\n            };\r\n            const termmenu = {\r\n                bf : {\r\n                    head: [\r\n                        [`前期solaリンク選択はぁと${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red} ❤ ${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`],\r\n                        [\"\"],\r\n                    ],\r\n                    body: page_name.bf.map((d) => [d]),\r\n                    foot: [\r\n                        [\"\"],\r\n                        [\"選択?>\"]\r\n                    ],\r\n                },\r\n                af : {\r\n                    head: [\r\n                        [`後期solaリンク選択はぁと${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red} ❤ ${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`],\r\n                        [\"\"],\r\n                    ],\r\n                    body: page_name.af.map((d) => [d]),\r\n                    foot: [\r\n                        [\"\"],\r\n                        [\"選択?>\"]\r\n                    ],\r\n                }\r\n            }\r\n\r\n            const main_option = {\r\n                home : await _classes_SelectOptions_js__WEBPACK_IMPORTED_MODULE_10__.SelectOptions.build(homemenu,errhomemenu),\r\n                bf   : await _classes_SelectOptions_js__WEBPACK_IMPORTED_MODULE_10__.SelectOptions.build(termmenu.bf,errhomemenu),\r\n                af   : await _classes_SelectOptions_js__WEBPACK_IMPORTED_MODULE_10__.SelectOptions.build(termmenu.af,errhomemenu)\r\n            }\r\n            let oldNetwork = await (0,_util_checkInternet_js__WEBPACK_IMPORTED_MODULE_8__.isNetConnected)();\r\n            /*\r\n            * ここではネットワーク接続状況を検知して、main_optionの表示画面をエラーと通常時で切り替えている\r\n            * 切り替えた結果はchoise.jsで適用される\r\n            * */\r\n            network_ID = setInterval(async()=>{\r\n                const nowNetwork = await (0,_util_checkInternet_js__WEBPACK_IMPORTED_MODULE_8__.isNetConnected)() // //0.1秒に一回接続状況に変化があるか確認。なければ何もしない\r\n                if (nowNetwork !== oldNetwork){\r\n                    for (const mainOptionKey in main_option) {\r\n                        //ステータスをnormal or errorに切り替えた後メニューをセット\r\n                        await (await main_option[mainOptionKey].setStatus()).setMenu(main_option[mainOptionKey].errorStatus);\r\n                    }\r\n                    oldNetwork = nowNetwork;\r\n                }\r\n            },50);\r\n\r\n\r\n            /*\r\n            * ホーム画面\r\n            */\r\n            //選択\r\n            state = await (0,_util_choise_js__WEBPACK_IMPORTED_MODULE_3__.choice)(main_option.home);\r\n\r\n            //制限時間の更新\r\n            timeout.now = new Date().valueOf();\r\n            //コマンドリスト\r\n            let comlist = [\r\n                [[\"euc\"], [\"logs\"], [\"images\"]],\r\n                [[\"sola\"], [\"solalist\"],[\"list_reload\"]],\r\n                [[\"sclass\"]],\r\n                [[\"sclass\", \"sola\"]],\r\n                [[\"course_registration\"]],\r\n                [[\"quit\"]]\r\n            ];\r\n            //コマンドリストの中からどれを選んだか\r\n            let whichOpen = comlist[state.index[0]][state.index[1]];\r\n            //QUITを選択した場合は終了\r\n            if (whichOpen[0] === \"quit\") {\r\n                break selectcommand;\r\n            }\r\n            //ネットワークが繋がっていない場合はQUIT以外何もできないようにする\r\n            if (!await (0,_util_checkInternet_js__WEBPACK_IMPORTED_MODULE_8__.isNetConnected)()){\r\n                continue selectcommand;\r\n            }\r\n            switch (whichOpen[0]) {\r\n                //EUC入力\r\n                case \"euc\":\r\n                    console.log(`EUCを入力してください\\n${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_yellow}※キャンセルする場合は何も入力せずエンターをおしてね${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n                    EUC = await (0,_util_input_js__WEBPACK_IMPORTED_MODULE_2__.input)(\"euc?>\");\r\n                    data.miss_count = 0;\r\n                    if (EUC === \"\") {\r\n                        break;//何も入力されなかったらコマンド入力に戻る\r\n                    }\r\n                    await openSUS(whichOpen, EUC, data).catch((reason)=>{\r\n                        console.log(reason);\r\n                    });//openSUSを実行\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n                    break;//何も入力されなかったらコマンド入力に戻る\r\n\r\n                //eucのlogファイルを開く\r\n                case \"logs\":\r\n                    console.log(\"EUCログを開きます\");\r\n                    (0,child_process__WEBPACK_IMPORTED_MODULE_7__.execSync)(\"start logs/euc.log\");\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n                    break;\r\n\r\n                //imagesフォルダを開く\r\n                case \"images\":\r\n                    console.log(\"EUCスクリーンショットを開きます\");\r\n                    (0,child_process__WEBPACK_IMPORTED_MODULE_7__.execSync)(\"start images\");\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n                    break;\r\n\r\n                case \"sclass\":\r\n                    await openSUS(whichOpen, EUC, data);//openSUSを実行\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n                    break;\r\n\r\n                case \"sola\":\r\n                    await openSUS(whichOpen, EUC, data);//openSUSを実行\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n                    break;\r\n\r\n                //solalistページに遷移\r\n                case \"solalist\":\r\n                    //前後期選択肢の末尾に前期後期切り替えページ用の選択肢を挿入\r\n                    main_option.bf.body.push([`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_yellow}<<戻る${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`, `${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_green}>>後期ページへ${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`]);\r\n                    main_option.af.body.push([`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_yellow}<<戻る${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`, `${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_green}>>前期ページへ${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`]);\r\n                    let term = _util_today_js__WEBPACK_IMPORTED_MODULE_4__.today.whichTerm();\r\n                    //ページループ\r\n                    selectpage:\r\n                        while (true) {\r\n                            //今の学期を先に開く\r\n                            state = await (0,_util_choise_js__WEBPACK_IMPORTED_MODULE_3__.choice)(main_option[term]);\r\n                            //入力がQUITならメニューループを抜ける\r\n                            if (state.str === \"5.QUIT\"){\r\n                                break selectcommand;\r\n                            }\r\n                            //ネットワークが繋がっていなければループ\r\n                            if (!await (0,_util_checkInternet_js__WEBPACK_IMPORTED_MODULE_8__.isNetConnected)()){\r\n                                continue selectpage;\r\n                            }\r\n                            //ページの選択をしたときはループ\r\n                            switch (state.str) {\r\n                                case \">>後期ページへ\":\r\n                                    term = \"af\";\r\n                                    continue selectpage;\r\n                                case \">>前期ページへ\":\r\n                                    term = \"bf\";\r\n                                    continue selectpage;\r\n                                case \"<<戻る\":\r\n                                    continue selectcommand;\r\n                                default:\r\n                                    //ページの選択以外の科目ページを選択したら、起動コマンドをsolaにし、solaのurlを対応する科目ページのurlにする\"\r\n                                    whichOpen = [\"sola\"];\r\n                                    data.sola.url = page_link[state.str];\r\n                                    await openSUS(whichOpen, EUC, data);\r\n                                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押してリストに戻る]\");\r\n                                    continue selectpage;\r\n                            }\r\n                        }\r\n                case \"list_reload\":\r\n                    console.clear();\r\n                    console.log(\"履修科目データの更新を行います\");\r\n                    await sleep(1500);\r\n                    console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_yellow}※ 科目データの更新には、回線の都合上3分ほどかかる場合がありますので、このままお待ち下さい${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n                    try {\r\n                        const sola_link = await (0,_util_makeSchedule_js__WEBPACK_IMPORTED_MODULE_12__.makeSchedule)(data);\r\n                        writeJSON(\"resource/data/info.json\", await _util_crypt_js__WEBPACK_IMPORTED_MODULE_13__.crypt.encrypt(data));//info.jsonを暗号化して書き込み\r\n                        writeJSON(\"resource/data/sola_link.json\", await _util_crypt_js__WEBPACK_IMPORTED_MODULE_13__.crypt.encrypt(sola_link));//info.jsonを暗号化して書き込み\r\n                    }catch (e){\r\n                        throw new Error(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red}\\n科目データの更新に失敗しました。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}\\nネットワークの接続状況を確認して、再実行してください。それでも失敗するようでしたら、${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_cyan}infoClear.exe${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}を実行して初期化ののちもう一度最初から登録を行ってください。\\n`);\r\n                    }\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n                    break;\r\n                case \"course_registration\":\r\n                    console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_yellow}[只今工事中・・・ごめんぴ☆ミ]${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}`)\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n                    break;\r\n                default :\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_6__.pause)(\"pass\",\"[エンターを押して選択に戻る]\");\r\n            }\r\n        } while (true); //selectcommand\r\n    return 0;\r\n}\r\n\r\n/*\r\n\topenSUS関数\r\n\tmain関数で入力されたコマンドに対応するサイトを開き、自動操縦を行う。\r\n\tEUCが選択されたときはヘッドレス。\r\n*/\r\nasync function openSUS(whichOpen, EUC, data) {\r\n\r\n    //コマンドがeuc,sola,sclassでなければ抜ける\r\n    if (whichOpen[0] !==\"euc\" && whichOpen[0] !== \"sclass\" && whichOpen[0] !== \"sola\" ){\r\n        return 0;\r\n    }\r\n    /* ブラウザの立ち上げ */\r\n    const browser = await (0,puppeteer__WEBPACK_IMPORTED_MODULE_0__.launch)({\r\n        headless: (whichOpen[0] === \"euc\") ? \"new\" : false, //ヘッドレス(ブラウザの表示・非表示)の設定。falseなら表示\r\n        slowMo: (whichOpen[0] === \"euc\") ? 0 : 0, //タイピング・クリックなどの各動作間の速度\r\n        defaultViewport: null, //ブラウザサイズとviewportがずれる不具合の防止\r\n        channel: \"chrome\",//chromeを探し出して開く\r\n        ignoreHTTPSErrors: true,\r\n        ignoreDefaultArgs: [\r\n            \"--disable-extensions\",\r\n            \"--enable-automation\",\r\n        ],\r\n        args: [\r\n            \"--proxy-server='direct://'\",\r\n            \"--proxy-bypass-list=*\"\r\n        ]\r\n    }).catch(() => {\r\n        throw new Error(_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red + \"ブラウザが開きませんでした。chromeがインストールされていることを確認してください。\" + _util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset);\r\n    });\r\n\r\n    const context = await browser.createIncognitoBrowserContext();//シークレットモードで開くため\r\n    const pagesB = await browser.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n    if (whichOpen[0] !== \"euc\") {\r\n        await pagesB[0].close();//about:brankを削除\r\n    }\r\n    //[sclass,sola]だった場合どっちも起動\r\n    for (const site of whichOpen) {\r\n        data.miss_count = 0; //ミスカウントの初期化\r\n        data.clg_count = 0;\r\n        /* sclassのとき */\r\n        if (site === \"sclass\") {\r\n            await context.newPage();\r\n            let pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n            Errorloop:\r\n                while (true) {\r\n                    try {\r\n                        await openSclass(context, data);\r\n                        pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n                        await pagesC[Math.max(pagesC.length - 2, 0)].close();\r\n                        break;\r\n                    } catch (error) {\r\n                        pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n                        if (pagesC.length - 1 > 0){\r\n                            await pagesC[pagesC.length - 1].close();\r\n                            for (let i = 0; i < data.clg_count; i++) {\r\n                                process.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.up}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.lineClear}`);\r\n                            }\r\n                            console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_yellow}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_black}接続エラー(${data.miss_count + 1})：接続に失敗しました再試行します。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n                            if (data.miss_count === 3) {\r\n                                console.log(`\\n${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_red}アクセスエラー：sclassへのアクセスに失敗しました。ネットワークが混雑している可能性があるので、しばらく時間をおいて再度試してください。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}\\n`);\r\n                                pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n                                await pagesC[Math.max(pagesC.length - 2, 0)].close();\r\n                                break;\r\n                            }\r\n                            data.miss_count++;\r\n                            await sleep(1000);\r\n                        }else{\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n        }//if sclass\r\n        /* solaのとき */\r\n        if (site === \"sola\") {\r\n            await context.newPage();\r\n            let pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n            Errorloop:\r\n                while (true) {\r\n                    try {\r\n                        await openSola(context, data);\r\n                        pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n                        await pagesC[Math.max(pagesC.length - 2, 0)].close();\r\n                        break;\r\n                    } catch (error) {\r\n                        pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n                        if (pagesC.length - 1 > 0){\r\n                            await pagesC[pagesC.length - 1].close();\r\n                            for (let i = 0; i < data.clg_count; i++) {\r\n                                process.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.up}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.lineClear}`);\r\n                            }\r\n                            console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_yellow}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_black}接続エラー(${data.miss_count + 1})：接続に失敗しました再試行します。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n                            if (data.miss_count === 3) {\r\n                                console.log(`\\n${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_red}アクセスエラー：solaへのアクセスに失敗しました。ネットワークが混雑している可能性があるので、しばらく時間をおいて再度試してください。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}`);\r\n                                pagesC = await context.pages();//ブラウザのページリストを取得。(0がabout:brankでこれを消すため)\r\n                                await pagesC[Math.max(pagesC.length - 2, 0)].close();\r\n                                break;\r\n                            }\r\n                            data.miss_count++;\r\n                            await sleep(1000);\r\n                        }else{\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }// if sola\r\n        /* eucのとき */\r\n        if (site === \"euc\") {\r\n            Errorloop:\r\n                while (true) {\r\n                    try {\r\n                        await openEuc(context, data, EUC);\r\n                        break;\r\n                    } catch (error) {\r\n                        // console.log(error);\r\n                        for (let i = 0; i < data.clg_count; i++) {\r\n                            process.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.up}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.lineClear}`);\r\n                        }\r\n                        console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_yellow}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_black}接続エラー(${data.miss_count + 1})：接続に失敗しました再試行します。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n                        if (data.miss_count === 3) {\r\n                            await browser.close();\r\n                            console.log(`\\n${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_red}登録エラー：EUCの登録に失敗しました。ネットワークが混雑している可能性があるので、しばらく時間をおいて再度試してください。${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}`);\r\n                            break;\r\n                        }\r\n                        data.miss_count++;\r\n                        await sleep(300);\r\n                    }\r\n                }\r\n            await browser.close();\r\n        }//if EUC\r\n    }// for of\r\n}\r\n\r\nclass WaitAccessMessage{\r\n    constructor(data) {\r\n        this.max_dot_quant = data.access_dot.max_quant;\r\n        this.waitmsec = data.access_dot.waitmsec;\r\n        this.waitAccess = undefined;\r\n    }\r\n    //アクセスメッセージの開始\r\n    async on(){\r\n        //アクセス待機メッセージ\r\n        process.stdout.write(\"アクセス中です\");\r\n        let dot_count = 0;\r\n        this.waitAccess = setInterval(()=>{\r\n            if (dot_count === this.max_dot_quant){\r\n                process.stdout.write(`\\x1b[${dot_count*2}D${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.rightClear}`);\r\n                dot_count=0;\r\n            }else{\r\n                process.stdout.write(\"・\");\r\n                dot_count++\r\n            }\r\n        },this.waitmsec);\r\n        return this.waitAccess;\r\n    }\r\n    //アクセスメッセージの終了\r\n    async off(){\r\n            if (typeof this.waitAccess){\r\n                process.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.lineClear}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.initialLine()}`);\r\n                (0,timers__WEBPACK_IMPORTED_MODULE_9__.clearInterval)(this.waitAccess)\r\n            }\r\n    }\r\n}\r\n\r\nasync function openSclass(browser, data) {\r\n    const info = data.sclass;//dataからsclassの情報を取得\r\n    const user_name = data.username;\r\n    const password = data.password;\r\n    //新規ページを開く\r\n    const page = await browser.newPage();\r\n\r\n    const url = info.url;//sclassのurl\r\n\r\n    //アクセス待機メッセージ\r\n    const waitAccess = new WaitAccessMessage(data);\r\n    await waitAccess.on();//アクセス待機メッセージ開始\r\n    try {\r\n        await page.goto(url, {waitUntil: 'networkidle2', timeout: 0}).catch(async()=>{\r\n            await waitAccess.off();\r\n            return new Promise.reject();\r\n        }); //ページ遷移\r\n\r\n        //アクセスが完了したらドットを打つのをやめてアクセス完了の文字を出力\r\n        process.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.lineClear}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.initialLine()}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_green}アクセス完了${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}\\n`);\r\n        await waitAccess.off()\r\n\r\n        const target_name_ID = info.target.name; //username入力要素のID\r\n        const target_pass_ID = info.target.pass; //password入力要素のID\r\n        const target_submit_ID = info.target.submit; //submitボタンのID\r\n        await page.waitForSelector(target_submit_ID, {visible: true, timeout: 15000});\r\n        await page.click(target_submit_ID); //submitクリック\r\n        await page.waitForSelector(target_name_ID, {visible: true, timeout: 15000});\r\n        await page.click(target_name_ID); //usernameクリック\r\n        await page.type(target_name_ID, user_name); //username入力\r\n        await page.waitForSelector(target_pass_ID, {visible: true, timeout: 15000});\r\n        await page.click(target_pass_ID); //passwordクリック\r\n        await page.type(target_pass_ID, password); //password入力\r\n        await page.waitForSelector(target_submit_ID, {visible: true, timeout: 15000});\r\n        await page.click(target_submit_ID); //submitクリック\r\n\r\n        const isError = await page.waitForSelector(\"span#htmlErrorMessage\", {visible: true, timeout: 2500})\r\n            .then(()=>true)\r\n            .catch(()=>false);\r\n        //エラーメッセージが取れてしまったときは失敗を返す\r\n        if (isError){\r\n            throw new Error(\"Input Error : 不正な領域にユーザー名あるいはパスワードが入力されたためsclass側でエラーが出ました。\");//rejectを返す\r\n        }else{\r\n            console.log(`\\n${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_green}sclassログイン完了${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n            data.clg_count++;\r\n        }\r\n    }catch (e) {\r\n        await waitAccess.off();\r\n        throw new Error(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_red}[ERROR]${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}\\n+${e}`);\r\n    }\r\n\r\n}\r\n\r\nasync function openSola(browser, data) {\r\n    const info = data.sola; //dataからsolaの情報を取得\r\n    const user_name = data.username;\r\n    const password = data.password;\r\n\r\n    const page = await browser.newPage();//新規ページを作成\r\n\r\n    const url = info.url;//solaのURL\r\n    //アクセス待機メッセージ\r\n    const waitAccess = new WaitAccessMessage(data);\r\n    await waitAccess.on();//アクセス待機メッセージ開始\r\n    try {\r\n        await page.goto(url, {waitUntil: 'networkidle2', timeout: 0}); //ページ遷移\r\n\r\n        //アクセスが完了したらドットを打つのをやめてアクセス完了の文字を出力\r\n        await waitAccess.off();//待機メッセージ終了\r\n        process.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.lineClear}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_green}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.initialLine()}アクセス完了${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}\\n`);\r\n\r\n        const target_name_ID = info.target.name; //username入力要素のID\r\n        const target_pass_ID = info.target.pass; //password入力要素のID\r\n        const target_submit_ID = info.target.submit; //submitボタンのID\r\n        await page.waitForSelector(target_name_ID, {visible: true, timeout: 30000});\r\n        await page.type(target_name_ID, user_name);//username入力\r\n        await page.click(target_submit_ID);//submitクリック\r\n        await page.waitForSelector(target_pass_ID, {visible: true, timeout: 30000});\r\n        await page.type(target_pass_ID, password);//password入力\r\n        await page.click(target_pass_ID);//passwordクリック(確実にsubmitするため)\r\n        await page.click(target_submit_ID, {delay: 800});//submitクリック\r\n        await page.waitForNavigation({waitUntil: \"load\", timeout: 2000}).catch(async () => {\r\n            await page.click(target_submit_ID, {delay: 800});//submitクリック\r\n        });\r\n        console.log(`\\n${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_green}SOLAログイン完了${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n        data.clg_count++;\r\n    }catch (e){\r\n        await waitAccess.off();\r\n        throw new Error(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_red}[ERROR]${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}\\n+${e}`);\r\n    }\r\n\r\n\r\n}\r\n\r\nasync function openEuc(browser, data, EUC) {\r\n\r\n    const info = data.sclass; //sclassのデータを取得\r\n    const user_name = data.username;\r\n    const password = data.password;\r\n    data.clg_count = 0; //標準出力の回数\r\n    const page = await browser.newPage();//新規ページを作成\r\n    const url = info.url; //sclassのurl\r\n\r\n    // CSSをOFFにして高速化\r\n    await page.setRequestInterception(true);\r\n    page.on('request', (request) => {\r\n        if (['image', 'stylesheet', 'font', 'script'].indexOf(request.resourceType()) !== -1) {\r\n            request.abort();\r\n        } else {\r\n            request.continue();\r\n        }\r\n    });\r\n    //アクセス待機メッセージ\r\n    const waitAccess = new WaitAccessMessage(data);\r\n    await waitAccess.on();//アクセス待機メッセージ開始\r\n\r\n    try {\r\n        await page.goto(url, {waitUntil: 'networkidle0', timeout: 20000}); //sclassに遷移\r\n\r\n        //アクセスが完了したらドットを打つのをやめてアクセス完了の文字を出力\r\n        await waitAccess.off();//アクセス待機メッセージ終了\r\n        process.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.lineClear}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_green}${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.initialLine()}アクセス完了${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}\\n`);\r\n\r\n        const target_name_ID = info.target.name;//username入力要素のID\r\n        const target_pass_ID = info.target.pass;//password入力要素のID\r\n        const target_submit_ID = info.target.submit;//submitボタンのID\r\n        await page.waitForSelector(target_submit_ID, {timeout: 20000});\r\n        await page.click(target_submit_ID);//submitクリック\r\n        await page.waitForSelector(target_name_ID, {timeout: 20000});\r\n        await page.type(target_name_ID, user_name);//username入力\r\n        await page.waitForSelector(target_pass_ID, {timeout: 20000});\r\n        await page.type(target_pass_ID, password);//password入力\r\n        await page.waitForSelector(target_submit_ID, {timeout: 20000});\r\n        await page.click(target_submit_ID)//submitクリック\r\n        console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_green}sclassログイン完了${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset}`);\r\n\r\n        data.clg_count++;\r\n        await page.evaluate(() => {window.scroll(0, 0);});\r\n\r\n        const target_risyuu_ID = \"div#pmenu4\"; //sclassの上のバーの「履修関連」\r\n        await page.waitForSelector(target_risyuu_ID, {visible: true, timeout: 30000});\r\n        await page.hover(target_risyuu_ID);//「履修関連」をホバー\r\n        const target_EUC_ID = await page.$eval(target_risyuu_ID,(div)=>{\r\n            return `#${Array.from(div.children).filter((c) => c.text === \"EUC学生出欠登録\")[0].id}`\r\n        });\r\n        await page.waitForSelector(target_EUC_ID, {visible: true, timeout: 30000});\r\n        await page.click(target_EUC_ID);//EUCをクリック\r\n        const target_eucIn_ID = \"input.inputText\"; //EUC入力要素のID\r\n        const target_eucSubmit_ID = \"input.button\";//EUCsubmitボタンのID\r\n        await page.waitForSelector(target_eucIn_ID, {visible: true, timeout: 0});\r\n        await page.type(target_eucIn_ID, EUC);//EUCの入力\r\n\r\n        page.on(\"dialog\", async dialog => {\r\n            await dialog.accept(); // OK\r\n        });\r\n\r\n        await page.click(target_eucSubmit_ID);//submitをクリック\r\n        await page.waitForSelector(\"td span.outputText\", {timeout: 10000});\r\n\r\n        //EUC登録した授業名を取得\r\n        const nam = await page.$eval(\"td span#form1\\\\3A Title\", (tar) => {\r\n            return tar.textContent.replace(/[\\t\\n]/g, \"\");\r\n        }).catch(() => {\r\n            return \"\";\r\n        });\r\n        //EUC登録の結果の文章を取得\r\n        const tex = await page.$eval(\"td span#form1\\\\3A htmlTorokukekka\", (tar) => {\r\n            return tar.textContent;\r\n        });\r\n        console.log(_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_cyan + nam + \"\\n\" + _util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset + _util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red + tex + _util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset); //結果をコンソールに表示\r\n        //「文章が異なります。」が出なかったらスクショ\r\n        if (tex !== \"番号が異なります。\") {\r\n            const shot_target = await page.$(\"table.sennasi\");\r\n            const filename = _util_today_js__WEBPACK_IMPORTED_MODULE_4__.today.getToday();\r\n            await shot_target.screenshot({\r\n                path: \"images/\" + nam + \"_\" + filename + \".jpg\",\r\n                type: 'jpeg',\r\n                // fullPage: true,\r\n                quality: 100\r\n            });\r\n            // /logs/euc.logファイルがあるか判定。なければ作成あったら追記\r\n            const todayEUC = `授業名：${nam},日付：${_util_today_js__WEBPACK_IMPORTED_MODULE_4__.today.getTodayJP()},EUC番号：${EUC},結果：${tex}\\n`;\r\n            if (!(0,fs__WEBPACK_IMPORTED_MODULE_1__.existsSync)(\"logs/euc.log\")) {\r\n                (0,fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync)(\"logs/euc.log\", todayEUC, \"utf-8\");\r\n            } else {\r\n                try {\r\n                    (0,fs__WEBPACK_IMPORTED_MODULE_1__.appendFileSync)(\"logs/euc.log\", todayEUC, \"utf-8\");\r\n                } catch (e) {\r\n                    console.log(_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_red + \"logs/euc.logにEUCを書き込めませんでした。\" + _util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.fg_reset);\r\n                }\r\n            }\r\n        }\r\n        data.miss_count = 0;\r\n        await browser.close();\r\n    }catch (e){\r\n        await waitAccess.off();\r\n        throw new Error(`${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_red}[ERROR]${_util_control_js__WEBPACK_IMPORTED_MODULE_5__.control.bg_reset}\\n+${e}`);\r\n    }\r\n}\n\n//# sourceURL=webpack://sus_login/./login.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _login_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./login.js */ \"./login.js\");\n/* harmony import */ var _util_reset_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/reset.js */ \"./util/reset.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./package.json */ \"./package.json\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var _util_existChromePath_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/existChromePath.js */ \"./util/existChromePath.js\");\n/* harmony import */ var _util_control_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/control.js */ \"./util/control.js\");\n/* harmony import */ var _util_importJSON_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/importJSON.js */ \"./util/importJSON.js\");\n/* harmony import */ var _util_input_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/input.js */ \"./util/input.js\");\n/* harmony import */ var _util_makeSchedule_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util/makeSchedule.js */ \"./util/makeSchedule.js\");\n/* harmony import */ var _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util/crypt.js */ \"./util/crypt.js\");\n/* harmony import */ var _util_today_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util/today.js */ \"./util/today.js\");\n/* harmony import */ var _util_pause_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./util/pause.js */ \"./util/pause.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! child_process */ \"child_process\");\n\r\n/*\r\n\t[main.js]\r\n\tフォルダの作成、login.jsの実行などの総合的な制御を行う。\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* sleep関数 */\r\nconst sleep = msec => new Promise(resolve => setTimeout(resolve, msec));\r\n/* writeJSON関数 */\r\nfunction writeJSON(dir, data) {\r\n    if (typeof data === \"string\"){\r\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(dir, data);\r\n    }else{\r\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(dir, JSON.stringify(data));\r\n    }\r\n}\r\n\r\n//main\r\n(async function main() {\r\n    while (true){\r\n        console.clear();\r\n        const version = _package_json__WEBPACK_IMPORTED_MODULE_3__.version;//バージョン\r\n        const PCname = (0,os__WEBPACK_IMPORTED_MODULE_4__.hostname)();//PCのホスト名\r\n\r\n        try {\r\n            // imagesフォルダがあるか判定。なければ作成\r\n            if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(\"./images\")) {\r\n                fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync(\"./images\");\r\n            }\r\n            // logsフォルダがあるか判定。なければ作成\r\n            if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(\"./logs\")) {\r\n                fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync(\"./logs\");\r\n                fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync(\"./logs/euc.log\", \"\");\r\n            }\r\n            // resource または resource/dataフォルダがあるか判定。なければ作成\r\n            if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(\"./resource\")||!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(\"./resource/data\")) {\r\n                fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync(\"resource/data\",{ recursive: true });\r\n            }\r\n            //info.jsonがあるか判定。なければ作成\r\n            if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(\"./resource/data/info.json\")) {\r\n                await (0,_util_reset_js__WEBPACK_IMPORTED_MODULE_2__.reset)(\"./resource/data/info.json\");\r\n            }\r\n\r\n            console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.bg_yellow}セットアップ中です・・・・・・${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.bg_reset}`);\r\n            const data = await input_name_and_pass(version,PCname);//初回起動なら学籍番号とパスワードを入力 info.jsonの中身をdataに格納\r\n            //初回起動のときはdataは1を返すので、dataが1のとき終了\r\n            if (data === 1){\r\n                await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_12__.pause)(\"exit\",\"[何かキーを押して終了します]\");\r\n            }\r\n\r\n            //sola_link.jsonがなかったら再生成\r\n            if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(\"./resource/data/sola_link.json\")){\r\n                const sola_link = await (0,_util_makeSchedule_js__WEBPACK_IMPORTED_MODULE_9__.makeSchedule)(data).catch(async() => {\r\n                    console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_red}[登録エラー] 履修科目データの登録に失敗しました。パスワードなどが正しいか確認してもう一度やり直してください${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n                    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_12__.pause)(\"exit\",\"[何かキーを押して終了します]\");\r\n                });\r\n                writeJSON(\"resource/data/sola_link.json\", await _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__.crypt.encrypt(sola_link));//sola_link.jsonの暗号化\r\n            }\r\n\r\n            const sola_link = await _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__.crypt.decrypt(\"resource/data/sola_link.json\");//info.jsonの中身を復号して変換\r\n\r\n            /* 前期後期の入れ替わり(4月と10月)にsola_link.jsonの更新 */\r\n            if (_util_today_js__WEBPACK_IMPORTED_MODULE_11__.today.isStartNend(data.last_upd) === true) {\r\n                console.clear();\r\n                console.log(\"期を跨いだので履修科目データの更新を行います\");\r\n                await sleep(1500);\r\n                console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_yellow}※ 科目データの更新には、回線の都合上3分ほどかかる場合がありますので、このままお待ち下さい${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n                try {\r\n                    const sola_link = await (0,_util_makeSchedule_js__WEBPACK_IMPORTED_MODULE_9__.makeSchedule)(data);\r\n                    writeJSON(\"resource/data/info.json\", await _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__.crypt.encrypt(data));//info.jsonを暗号化して書き込み\r\n                    writeJSON(\"resource/data/sola_link.json\", await _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__.crypt.encrypt(sola_link));//info.jsonを暗号化して書き込み\r\n                }catch (e){\r\n                    throw new Error(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_red}\\n科目データの更新に失敗しました。${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}\\nネットワークの接続状況を確認して、再実行してください。それでも失敗するようでしたら、${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_cyan}infoClear.exe${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}を実行して初期化ののちもう一度最初から登録を行ってください。\\n`);\r\n                }\r\n            }\r\n            //login関数に入る\r\n            await (0,_login_js__WEBPACK_IMPORTED_MODULE_1__.login)(version,data,sola_link);\r\n            break;\r\n        } catch (e) {\r\n            console.clear();\r\n            console.log(\"[ERROR]\")\r\n            console.log(e);\r\n            await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_12__.pause)(\"pass\",\"[何かキーを押して再起動します]\");\r\n        }\r\n    }\r\n    await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_12__.pause)(\"exit\",\"[何かキーを押して終了します]\");\r\n})();\r\n\r\n//初回起動設定\r\nasync function input_name_and_pass(version,PCname) {\r\n\r\n    //chromeがインストールされているかの判定\r\n    if (!(0,_util_existChromePath_js__WEBPACK_IMPORTED_MODULE_5__.existChromePath)().length) {\r\n        console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_red}[ERROR]${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n        console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_red}chromeがインストールされていません！${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n        console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_green}C:\\\\Program Files\\\\${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_red}以下などにchromeをインストールしてから再起動してください!${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n        console.log(`chrome公式ページのURL→${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_cyan}[https://www.google.com/intl/ja_jp/chrome/]${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n        throw \"Chrome install error\";\r\n    }\r\n    try {\r\n        //info.jsonが暗号化されていなければ取り込める\r\n        let data_can_write = (0,_util_importJSON_js__WEBPACK_IMPORTED_MODULE_7__.importJSON)(`resource/data/info.json`);\r\n        console.log(`初回起動を確認しました・・・`);\r\n        await sleep(1000);\r\n        console.clear();\r\n        console.log(`OpenSUS_v${version} へようこそ！`);\r\n        console.log(`ユーザー名(学籍番号)とパスワードの設定を行います。`);\r\n        //学籍番号の入力\r\n        const NAME = await (0,_util_input_js__WEBPACK_IMPORTED_MODULE_8__.input)(\"UserName?>\", false);\r\n        //パスワードの入力。二回入力させて間違っていれば再入力\r\n        do {\r\n            try {\r\n                const PAWO1 = await (0,_util_input_js__WEBPACK_IMPORTED_MODULE_8__.input)(\"PassWord?>\", true);\r\n                console.log(\"確認のためもう一度パスワードを入力してください\");\r\n                const PAWO2 = await (0,_util_input_js__WEBPACK_IMPORTED_MODULE_8__.input)(\"PassWord?>\", true);\r\n                if (PAWO1 === PAWO2) {\r\n                    data_can_write.username = NAME; //usernameの追加\r\n                    data_can_write.password = PAWO1; //passwordの追加\r\n                    break;\r\n                } else {\r\n                    console.log(\"パスワードが一致しません。もう一度入力してください\");\r\n                    await sleep(1000);\r\n                }\r\n            }catch (e){\r\n                console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_red}[登録エラー] ユーザー名及びパスワードの登録に失敗しました。もう一度再起動してください${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n                process.exit();\r\n            }\r\n        }while (true);\r\n\r\n        console.log(\"ユーザー名及びパスワードを登録しました\");\r\n        await sleep(1500);\r\n\r\n        console.clear();\r\n\r\n        /* 履修データの登録 */\r\n        console.log(\"続いて、履修科目データの登録を行います\");\r\n        console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_yellow}※ 科目データの登録には、回線の都合上3分ほどかかる場合がありますので、このままお待ち下さい${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n        /* makeSchedule関数：resource/data/sola_link.jsonの作成 */\r\n        try {\r\n            const sola_link = await (0,_util_makeSchedule_js__WEBPACK_IMPORTED_MODULE_9__.makeSchedule)(data_can_write);\r\n            console.log(\"認証ファイルの暗号化を行います・・・\");\r\n            writeJSON(\"resource/data/info.json\", await _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__.crypt.encrypt(data_can_write));//info.jsonを暗号化して書き込み\r\n            writeJSON(\"resource/data/sola_link.json\", await _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__.crypt.encrypt(sola_link));//sola_link.jsonの暗号化\r\n            await sleep(2000);\r\n            console.log(\"\\n設定が完了しました。次回起動時から本機能が使用可能になります。\");\r\n        }catch (e){\r\n            console.log(`${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_red}[登録エラー] 履修科目データの登録に失敗しました。以下の項目を確認してもう一度やり直してください\r\n            [考えられる原因]\r\n            ・ユーザー名またはパスワードの入力間違い\r\n            ・インターネットに接続されていない\r\n            ・S-ClassまたはSOLAのサーバーが落ちているなどの不具合\r\n            ${_util_control_js__WEBPACK_IMPORTED_MODULE_6__.control.fg_reset}`);\r\n            await (0,_util_pause_js__WEBPACK_IMPORTED_MODULE_12__.pause)(\"exit\",\"[何かキーを押して終了します]\");\r\n        }\r\n        return 1;\r\n    } catch (e) {\r\n        //info.jsonがすでに暗号化されていてjsonとして取り込めなかったとき\r\n        return await _util_crypt_js__WEBPACK_IMPORTED_MODULE_10__.crypt.decrypt('resource/data/info.json', PCname);//info.jsonの中身を復号して変換\r\n    }\r\n}\n\n//# sourceURL=webpack://sus_login/./main.js?");

/***/ }),

/***/ "./util/checkInternet.js":
/*!*******************************!*\
  !*** ./util/checkInternet.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNetConnected: () => (/* binding */ isNetConnected)\n/* harmony export */ });\n/* harmony import */ var dns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dns */ \"dns\");\n\r\n\r\nfunction isNetConnected(){\r\n    return new Promise((resolve,reject)=>{\r\n        //インターネットが繋がっているかをgoogleにアクセスして解決出来るかで判定\r\n        dns__WEBPACK_IMPORTED_MODULE_0__.lookup('www.google.com', (err)=>{\r\n            if (err && err.code === \"ENOTFOUND\") {\r\n                //繋がってない\r\n                resolve(false);\r\n            } else {\r\n                //繋がってる\r\n                resolve(true);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n\r\n// setInterval(async ()=>{\r\n//     console.log(await isNetConnected())\r\n// },1000);\n\n//# sourceURL=webpack://sus_login/./util/checkInternet.js?");

/***/ }),

/***/ "./util/choise.js":
/*!************************!*\
  !*** ./util/choise.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   choice: () => (/* binding */ choice)\n/* harmony export */ });\n/* harmony import */ var _util_control_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/control.js */ \"./util/control.js\");\n\r\n/*\r\n\t[choice.js]\r\n\thead,body,footを引数として受け取り、bodyの選択肢を十字キーで選択。\r\n\tindex等パックしたstateを返す\r\n*/\r\n\r\n\r\n//エンコードをutf8に\r\nprocess.stdin.setEncoding('utf8');\r\n// 標準入力の受け取り\r\nasync function choice(args = { Menu:{ head:[], body:[], foot:[] }}) {\r\n\r\n\tlet key = \"\";\r\n\r\n\tclass States {\r\n\t\tconstructor() {\r\n\t\t\tthis.Options \t= {};\r\n\t\t\tthis.index = [0,0];\r\n\t\t\tthis.index_old = [0,0];\r\n\t\t\tthis.H_Start = 0;\r\n\t\t\tthis.H_Line\t = 0;\r\n\t\t\tthis.H_End   = 0;\r\n\t\t\tthis.B_Start = 0;\r\n\t\t\tthis.B_Line  = 0;\r\n\t\t\tthis.B_End   = 0;\r\n\t\t\tthis.F_Start = 0;\r\n\t\t\tthis.F_Line  = 0;\r\n\t\t\tthis.F_End   = 0;\r\n\t\t\tthis.F_len\t = 0;\r\n\t\t\tthis.errorStatus_Old = args.errorStatus;\r\n\t\t\tthis.index_space = \"\\t\";\r\n\t\t}\r\n\t\tstatic async build(args){\r\n\t\t\tclass Prints extends this{\r\n\t\t\t\tconstructor() {\r\n\t\t\t\t\tsuper();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * 指定箇所を青く色付け表示する関数\r\n\t\t\t\t * */\r\n\t\t\t\tasync printCyan(){\r\n\t\t\t\t\tconst Index_Start \t  = this.B_Start + this.index[0];//ボディ開始行\r\n\t\t\t\t\tconst Index_Old_Start = this.B_Start + this.index_old[0]//ボディ開始行\r\n\t\t\t\t\tconst B_End   \t\t  = this.B_End;  //ボディ終了行\r\n\t\t\t\t\tconst str \t\t\t  = this.Options.body[this.index[0]];//選択中の項目名を取得\r\n\t\t\t\t\tconst str_old \t\t  = this.Options.body[this.index_old[0]];//選択中の項目名を取得\r\n\r\n\t\t\t\t\t/** 前回選択されていた部分は元の色に戻す*/\r\n\t\t\t\t\tprocess.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.startLine(Index_Old_Start)}`);//前回選択の行頭まで移動\r\n\t\t\t\t\tstr_old.forEach((s=\"\", i) => {\r\n\t\t\t\t\t\tprocess.stdout.write(`${s}${this.index_space}`);//出力\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t/** 今回選択のものは横indexを見て、指定のものだけ色つけ*/\r\n\t\t\t\t\tprocess.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.startLine(Index_Start)}`);//目的の行頭まで移動\r\n\t\t\t\t\t//横項目の色付けと、選択していない項目の色抜き\r\n\t\t\t\t\t//forEachのiと横indexが一致するもののみ色付けすることで色が残ったりしない\r\n\t\t\t\t\tstr.forEach((s=\"\", i) => {\r\n\t\t\t\t\t\tconst s_only_char = s.replace(/\\x1b\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[mGK]/g,\"\"); //文字列からエスケープシーケンスを除いたもの\r\n\t\t\t\t\t\tconst whichColor = (i === this.index[1]) ? _util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.fg_cyan : _util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.fg_reset; //選択中の横indexとiが一致するもののみ色付け\r\n\t\t\t\t\t\tconst whichStr = (i === this.index[1]) ? s_only_char : s; // 選択中の横indexとiが一致するものはエスケープシーケンスを除く。こうすることで色が付けられる。\r\n\t\t\t\t\t\tprocess.stdout.write(`${whichColor}${whichStr}${_util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.fg_reset}${this.index_space}`);//出力\r\n\t\t\t\t\t});\r\n\t\t\t\t\tprocess.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.startLine(B_End)}\\n`);//改行出力\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * 選択中の項目をフッターの横に表示する関数\r\n\t\t\t\t * */\r\n\t\t\t\tasync printChoice(){\r\n\t\t\t\t\tconst F_start = this.F_End;\r\n\t\t\t\t\tconst P_Start = this.P_Start;\r\n\t\t\t\t\t//選択している項目の表示\r\n\t\t\t\t\tprocess.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.startLine(F_start, P_Start)}\\t`);\r\n\t\t\t\t\tprocess.stdout.write(`${this.Options.body[this.index[0]][this.index[1]]}`);\r\n\t\t\t\t\tprocess.stdout.write(`${_util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.rightClear}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * argsを受け取ってその通りに画面に表示する関数\r\n\t\t\t\t * */\r\n\t\t\t\tasync printPrompt() {\r\n\t\t\t\t\tconst Options = this.Options;\r\n\t\t\t\t\tconsole.clear();\r\n\t\t\t\t\t/*\r\n                    * 描画処理部\r\n                    * foreachを用いているのは、body:[[\"1\",\"2\"],[\"3\"]]のように区切られている場合にも対応するため\r\n                    * ↑の表示例：\r\n                    * 1\t\t2\r\n                    * 3\r\n                    * */\r\n\r\n\t\t\t\t\t//ヘッダー、ボディ、フッターの描画\r\n\t\t\t\t\tfor (const optionsKey in Options) {\r\n\t\t\t\t\t\t// console.log(Options[optionsKey][0]);\r\n\t\t\t\t\t\tOptions[optionsKey].forEach((array) => {\r\n\t\t\t\t\t\t\tarray.forEach((prop)=>{\r\n\t\t\t\t\t\t\t\tprocess.stdout.write(`${prop}${this.index_space}`);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tconsole.log();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * printPrompt,printChoice,printCyanを一括でやってくれる\r\n\t\t\t\t * */\r\n\t\t\t\tasync render(args){\r\n\t\t\t\t\tawait this.clearIndex();\r\n\t\t\t\t\tawait this.setProperties(args);\r\n\t\t\t\t\tawait this.printPrompt();\r\n\t\t\t\t\tawait this.printCyan();\r\n\t\t\t\t\tawait this.printChoice();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst ST = new Prints();\r\n\t\t\tawait ST.render(args);\r\n\t\t\treturn ST;\r\n\t\t}\r\n\t\tasync setProperties(args){\r\n\t\t\t/** 表示する内容*/\r\n\t\t\tthis.Options = args.Menu;\r\n\r\n\t\t\t/** 現在選択中のプロンプト*/\r\n\t\t\tthis.nowPrompt = ()=>this.Options.body[this.index[0]][this.index[1]];\r\n\r\n\t\t\t/** ヘッダーの開始行*/\r\n\t\t\tthis.H_Start = 1;\r\n\t\t\t/** ヘッダーの行数*/\r\n\t\t\tthis.H_Line = args.Menu.head.length;\r\n\t\t\t/** ヘッダーの終了行*/\r\n\t\t\tthis.H_End = this.H_Start+this.H_Line - 1;\r\n\t\t\t/** ボディの開始行*/\r\n\t\t\tthis.B_Start = this.H_End + 1;\r\n\t\t\t/** ボディの行数*/\r\n\t\t\tthis.B_Line = args.Menu.body.length;\r\n\t\t\t/** ボディの終了行*/\r\n\t\t\tthis.B_End = this.B_Start + this.B_Line - 1;\r\n\t\t\t/** フッターの開始行*/\r\n\t\t\tthis.F_Start = this.B_End + 1;\r\n\t\t\t/** フッターの行数*/\r\n\t\t\tthis.F_Line = args.Menu.foot.length;\r\n\t\t\t/** フッターの終了行*/\r\n\t\t\tthis.F_End = this.F_Start + this.F_Line - 1;\r\n\t\t\t/** フッターの文字数*/\r\n\t\t\tthis.F_Len = args.Menu.foot[this.F_Line - 1].length;\r\n\t\t\t/**　現在の選択肢(プロンプト)を表示する位置*/\r\n\t\t\tthis.P_Start = this.F_Len + 5;\r\n\t\t\t/**　現在の選択肢(プロンプト)の文字数*/\r\n\t\t\tthis.P_Len = this.nowPrompt().length;\r\n\t\t\t/**　現在の選択肢(プロンプト)の終端*/\r\n\t\t\tthis.P_End = this.P_Start + this.P_Len;\r\n\r\n\t\t}\r\n\t\tasync clearIndex(){\r\n\t\t\t/** インデックスの初期化*/\r\n\t\t\tthis.index = [0,0];\r\n\t\t\tthis.index_old = [0,0];\r\n\t\t}\r\n\t\tget LineNum(){\r\n\t\t\treturn {\r\n\t\t\t\t/** ヘッダーの開始行*/\r\n\t\t\t\tH_Start : this.H_Start,\r\n\t\t\t\t/** ヘッダーの行数*/\r\n\t\t\t\tH_Line : this.H_Line,\r\n\t\t\t\t/** ヘッダーの終了行*/\r\n\t\t\t\tH_End : this.H_End,\r\n\t\t\t\t/** ボディの開始行*/\r\n\t\t\t\tB_Start : this.B_Start,\r\n\t\t\t\t/** ボディの行数*/\r\n\t\t\t\tB_Line : this.B_Line,\r\n\t\t\t\t/** ボディの終了行*/\r\n\t\t\t\tB_End : this.B_End,\r\n\t\t\t\t/** フッターの開始行*/\r\n\t\t\t\tF_Start : this.F_Start,\r\n\t\t\t\t/** フッターの行数*/\r\n\t\t\t\tF_Line : this.F_Line,\r\n\t\t\t\t/** フッターの終了行*/\r\n\t\t\t\tF_End : this.F_End,\r\n\t\t\t\t/** フッターの文字数*/\r\n\t\t\t\tF_Len : this.F_Len,\r\n\t\t\t\t/**　現在の選択肢(プロンプト)を表示する位置*/\r\n\t\t\t\tP_Start : this.F_Len + 5,\r\n\t\t\t\t/**　現在の選択肢(プロンプト)の文字数*/\r\n\t\t\t\tP_Len : this.nowPrompt().length,\r\n\t\t\t\t/**　現在の選択肢(プロンプト)の終端*/\r\n\t\t\t\tP_End : this.P_Start + this.P_Len,\r\n\t\t\t}\r\n\t\t}\r\n\t\t//横項目の最大数を取得\r\n\t\tget indexMax(){return args.Menu.body.length - 1;}\r\n\t\t//現在選択したものindexと選択肢名を返す\r\n\t\tget choosing(){\r\n\t\t\treturn {\r\n\t\t\t\tindex:[state.index[0],state.index[1]],\r\n\t\t\t\tstr_raw:args.Menu.body[state.index[0]][state.index[1]],\r\n\t\t\t\tstr: args.Menu.body[state.index[0]][state.index[1]].replace(/\\x1b\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[mGK]/g, \"\"),\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tconst state = await States.build(args);//stateオブジェクトのインスタンス化\r\n\r\n\t//ネットワークの変更を検知\r\n\tconst headID = setInterval(async()=>{\r\n\t\tif (state.errorStatus_Old !== args.errorStatus){\r\n\t\t\tawait state.render(args);\r\n\t\t\tstate.errorStatus_Old = args.errorStatus;\r\n\t\t}\r\n\t},10);\r\n\r\n\t//エンターキーが押されるまでキーを受け付け続ける\r\n\tfor (; key.charCodeAt(0) !== 13;) {\r\n\t\tkey = await inputKey(state); //方向キーやエンターキーなどの入力したキーを逐一保存\r\n\t\tawait state.printCyan();\r\n\t\tawait state.printChoice();\r\n\t}\r\n\tconsole.log(\"\\n\");\r\n\t// clearInterval(headID);\r\n\treturn state.choosing;\r\n}\r\n\r\n/** キー操作に応じて、引数のstateを弄る\r\n * @param {Object} state //カーソル選択したい文章とindexが入ってる\r\n * @return {Promise}\r\n * */\r\nconst inputKey = (state) => new Promise(resolve => {\r\n\tconst stdin = process.stdin;\r\n\tconst isRow = stdin.isRaw;\r\n\tconst callBack = key => {\r\n\t\t//コントロールCが押されたら強制終了\r\n\t\tif (key === _util_control_js__WEBPACK_IMPORTED_MODULE_0__.control.CtrlC) process.exit(-1);\r\n\t\t//上下選択方向キーごとの関数\r\n\t\tconst direction = {\r\n\t\t\t\"\\x1b[A\":\r\n\t\t\t\tfunction up() {\r\n\t\t\t\t\t//上キー押したらindex[0]-1\r\n\t\t\t\t\tstate.index[0]--;\r\n\t\t\t\t\t//オーバーフローしたら下端へ\r\n\t\t\t\t\tif (state.index[0] < 0) {\r\n\t\t\t\t\t\tstate.index[0] = state.indexMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//直上に何もコマンドがなければ横はリセット。あればそのまま\r\n\t\t\t\t\tif (state.Options.body[state.index[0]][state.index[1]] === undefined) {\r\n\t\t\t\t\t\tstate.index[1] = 0;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\"\\x1b[B\":\r\n\t\t\t\tfunction down() {\r\n\t\t\t\t\t//下キー押したらindex[0]+1\r\n\t\t\t\t\tstate.index[0]++;\r\n\t\t\t\t\t//オーバーフローしたら上端へ\r\n\t\t\t\t\tif (state.index[0] > state.indexMax) {\r\n\t\t\t\t\t\tstate.index[0] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//直下に何もコマンドがなければ横はリセット。あればそのまま\r\n\t\t\t\t\tif (state.Options.body[state.index[0]][state.index[1]] === undefined) {\r\n\t\t\t\t\t\tstate.index[1] = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\"\\x1b[C\":\r\n\t\t\t\tfunction right() {\r\n\t\t\t\t\t//横要素があるときに右キー押したらindex[1]+1\r\n\t\t\t\t\tif (state.Options.body[state.index[0]].length > 1) {\r\n\t\t\t\t\t\t//右端に行くまでOK\r\n\r\n\t\t\t\t\t\tif (state.index[1] < state.Options.body[state.index[0]].length - 1) {\r\n\t\t\t\t\t\t\tstate.index[1]++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\"\\x1b[D\":\r\n\t\t\t\tfunction left() {\r\n\t\t\t\t\t//既に横要素にいるときは左キー押したらindex[1]-1\r\n\t\t\t\t\tif (state.index[1] >= 1) {\r\n\t\t\t\t\t\tstate.index[1]--;\r\n\t\t\t\t\t\t//左端にいるときは何もしない\r\n\t\t\t\t\t} else if (state.index[1] === 0) {\r\n\t\t\t\t\t\t;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tstate.index_old = state.index.concat();\r\n\t\t\tdirection[key]();//方向以外のキーが押された場合、エラーが起きるが握りつぶす\r\n\t\t} catch (e) {\r\n\t\t\t;\r\n\t\t}\r\n\t\tstdin.off(\"data\", callBack);\r\n\t\tstdin.pause();\r\n\t\tstdin.setRawMode(isRow);\r\n\t\tresolve(key);//resolve\r\n\t};\r\n\tstdin.setRawMode(true);\r\n\tstdin.resume();\r\n\tstdin.on(\"data\", callBack);\r\n});\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://sus_login/./util/choise.js?");

/***/ }),

/***/ "./util/control.js":
/*!*************************!*\
  !*** ./util/control.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   control: () => (/* binding */ control)\n/* harmony export */ });\n\r\n/* \r\n\t[control.js]\r\n\t制御文字一般を扱う。コンソール操作用\r\n*/\r\nconst control = {\r\n\t/* 制御文字一覧 */\r\n\tCtrlC: \"\\u0003\", \t\t//コントロール+C\r\n\terathe: \"\\b\\b\\x1b[0K\",\t//一文字消す\r\n\tnowrite: \"\\b\\x1b[0K\",\t//書き込まない\r\n\trightClear: \"\\x1b[0K\",\t//カーソルより行の右側消去\r\n\tlineClear: \"\\x1b[2K\",\t//行消去\r\n\tstartLine : (r = 1, n = 1) => `\\x1b[${r};${n}H`,//スタート位置の決定\r\n\tinitialLine : (n = 1)=> `\\x1b[${n}G`,//指定行目の行頭に移動\r\n\r\n\t/* 方向キー */\r\n\tup: \t\"\\x1b[A\",//上\r\n\tdown: \t\"\\x1b[B\",//下\r\n\tright: \t\"\\x1b[C\",//右\r\n\tleft: \t\"\\x1b[D\",//左\r\n\t/* 文字色 */\r\n\tfg_black: '\\x1b[30m',\t//黒\r\n\tfg_red: '\\x1b[31m',\t\t//赤\r\n\tfg_green: '\\x1b[32m',\t//緑\r\n\tfg_yellow: '\\x1b[33m',\t//黄色\r\n\tfg_blue: '\\x1b[34m',\t//青\r\n\tfg_magenta: '\\x1b[35m',\t//紫っぽいマゼンタ\r\n\tfg_cyan: '\\x1b[36m',\t//水色っぽいシアン\r\n\tfg_white: '\\x1b[37m',\t//白\r\n\tfg_reset: '\\x1b[0m',\t//リセット\r\n\r\n\t/* 背景色 */\r\n\tbg_black: \"\\x1b[40m\",\t//黒\r\n\tbg_red: \"\\x1b[41m\",\t\t//赤\r\n\tbg_green: \"\\x1b[42m\",\t//緑\r\n\tbg_yellow: \"\\x1b[43m\",\t//黄色\r\n\tbg_blue: \"\\x1b[44m\",\t//青\r\n\tbg_magenta: \"\\x1b[45m\",\t//マゼンタ\r\n\tbg_cyan: \"\\x1b[46m\",\t//シアン\r\n\tbg_white: \"\\x1b[47m\",\t//白\r\n\tbg_reset: \"\\x1b[49m\"\t//リセット\r\n}\n\n//# sourceURL=webpack://sus_login/./util/control.js?");

/***/ }),

/***/ "./util/crypt.js":
/*!***********************!*\
  !*** ./util/crypt.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypt: () => (/* binding */ crypt)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! os */ \"os\");\n\r\n/* \r\n\t[crypt.js]\r\n\tinfo.jsonの中身を暗号化および復号する\r\n */\r\n\r\n//cryptオブジェクトをエクスポート\r\n\r\n\r\n\r\nconst crypt = {\r\n\tkey : (0,os__WEBPACK_IMPORTED_MODULE_1__.hostname)(),\r\n\t//文字列を1文字ずつ文字コードにして足し算\r\n\tasync strToDec(str) {\r\n\t\tlet codesum = 0x0;\r\n\t\tfor (let i = 0; i < str.length; i++) {\r\n\t\t\tconst charcode = str.slice(i, i + 1).charCodeAt(0) ;\r\n\t\t\tcodesum += charcode;\r\n\t\t}\r\n\t\treturn codesum;\r\n\t},\r\n\t//暗号化\r\n\tasync encrypt(data) {\r\n\t\tconst hirabun = JSON.stringify(data);\r\n\t\tconst dec = await this.strToDec(this.key);\r\n\t\tlet str = [];\r\n\t\tstr[0] = hirabun; //平文\r\n\t\tlet i, n;\r\n\t\tlet y = 0;\r\n\t\tlet x = dec;\r\n\t\t//繰り返し回数をざっくり計算\r\n\t\tfor (n = 1; y < 4000000; n++) {\r\n\t\t\ty = x * 2 * String(n).length\r\n\t\t\tx = y;\r\n\t\t}\r\n\t\t// const dec2 = parseInt(dec / 35); //繰り返し回数\r\n\t\tconst dec2 = n - 1;//繰り返し回数\r\n\t\tfor (i = 0; i < dec2; i++) {\r\n\t\t\tstr[i + 1] = \"\";\r\n\t\t\tfor (let j = 0; j < str[i].length; j++) {\r\n\t\t\t\tconst hiracode = str[i].charCodeAt(j) ^ (dec + i);//文字列を1文字ずつコードと排他的論理和\r\n\t\t\t\tconst angou = String.fromCharCode(hiracode); //hiracodeを文字化\r\n\t\t\t\t// const angou = hiracode;\r\n\t\t\t\tstr[i + 1] += angou + i;//暗号化文字にiの値を付け加えて増量\r\n\t\t\t\t// console.log(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn str[i];//成功したらstrを返す\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(\"暗号化に失敗しました\");\r\n\t\t\tthrow \"暗号化エラー\";\r\n\t\t}\r\n\t},\r\n\t//復号\r\n\tasync decrypt(path) {\r\n\t\tconst angou = (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(path, \"utf-8\");\r\n\t\tconst dec = await this.strToDec(this.key);\r\n\r\n\t\tlet str = [];\r\n\t\tstr[0] = angou;\r\n\t\tlet i, n;\r\n\t\tlet y = 0;\r\n\t\tlet x = dec;\r\n\t\t//繰り返し回数を予めざっくり計算\r\n\t\tfor (n = 1; y < 4000000; n++) {\r\n\t\t\ty = x * 2 * String(n).length\r\n\t\t\tx = y;\r\n\t\t}\r\n\t\t// const dec2 = parseInt(dec / 35);\r\n\t\tconst dec2 = n - 1;//繰り返し回数\r\n\t\tfor (i = 0; i < dec2; i++) {\r\n\t\t\tstr[i + 1] = \"\";\r\n\t\t\tconst ilen = (dec2 -1 - i).toString().length;\r\n\t\t\t// console.log(ilen);\r\n\t\t\tfor (let j = 0; j < str[i].length / (ilen + 1) ; j++) {\r\n\t\t\t\tconst start = j * (ilen+1);\r\n\t\t\t\tconst end = j * (ilen+1) + 1;\r\n\r\n\t\t\t\t// console.log(j + \"/\" + str[i].length + \",\" + ilen + \",\" + start + \",\" + end);\r\n\t\t\t\tconst ancode = str[i].slice(start, end).charCodeAt(0) ^ (dec + dec2 - 1 - i);\r\n\t\t\t\tconst hukugou = String.fromCharCode(ancode);\r\n\t\t\t\t// console.log(start + \",\" + end + \"   \" + str[i].slice(start, end) + \" : \" + str[i].slice(start, end).charCodeAt(0)+\"   \" + ancode + \" : \"+hukugou);\r\n\r\n\t\t\t\t// const hukugou = ancode;\r\n\t\t\t\tstr[i + 1] += hukugou;\r\n\t\t\t}\r\n\t\t\t// console.log(str[i + 1] + \"\\n\");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn JSON.parse(str[i]);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(\"復号に失敗しました\");\r\n\t\t\tthrow \"復号エラー\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\n\n//# sourceURL=webpack://sus_login/./util/crypt.js?");

/***/ }),

/***/ "./util/existChromePath.js":
/*!*********************************!*\
  !*** ./util/existChromePath.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   existChromePath: () => (/* binding */ existChromePath)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n\r\n/* \r\n\t[existChromePath.js]\r\n\tローカルにChromeが存在するかを確認して、一つでも存在するならtrueを返す\r\n*/\r\n\r\n\r\n\r\n\r\n\r\nfunction existChromePath() {\r\n\r\n\tconst suffix = `\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;//chrome.exeまでのサフィックス\r\n\t//ローカル依存のプレフィックス\r\n\tconst prefixes = [\r\n\t\tprocess.env.LOCALAPPDATA,\r\n\t\tprocess.env.PROGRAMFILES,\r\n\t\tprocess.env['PROGRAMFILES(X86)']\r\n\t].filter(Boolean);//空の値を削除\r\n\t//ファイルが存在するかを各パスに確認\r\n\treturn prefixes.map(prefix => (0,fs__WEBPACK_IMPORTED_MODULE_1__.existsSync)((0,path__WEBPACK_IMPORTED_MODULE_0__.join)(prefix, suffix))).filter(Boolean);\r\n}\n\n//# sourceURL=webpack://sus_login/./util/existChromePath.js?");

/***/ }),

/***/ "./util/importJSON.js":
/*!****************************!*\
  !*** ./util/importJSON.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   importJSON: () => (/* binding */ importJSON)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n\r\n\r\n\r\n\r\nfunction importJSON(path=\"\"){\r\n    return JSON.parse((0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(path,\"utf8\"));\r\n}\n\n//# sourceURL=webpack://sus_login/./util/importJSON.js?");

/***/ }),

/***/ "./util/input.js":
/*!***********************!*\
  !*** ./util/input.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   input: () => (/* binding */ input)\n/* harmony export */ });\n/* harmony import */ var readline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! readline */ \"readline\");\n\r\n\r\n\r\nprocess.stdin.setEncoding('utf8');\r\nconst CtrlC = \"\\u0003\";\r\nconst erathe = \"\\b\\b\\x1b[0K\";\r\nconst nowrite = \"\\b\\x1b[0K\";\r\n\r\nconst inputKey = (prompt) => new Promise(resolve => {\r\n\tconst stdin = process.stdin;\r\n\tconst isRow = stdin.isRaw;\r\n\tconst callBack = (key = \"\") => {\r\n\t\tstdin.off(\"data\", callBack);\r\n\t\tstdin.pause();\r\n\t\tstdin.setRawMode(isRow);\r\n\t\t//上キーとかのエスケープで始まる文字は非表示\r\n\t\tif (key.charCodeAt(0) === 27) {\r\n\t\t\tresolve(\"\");//promiseの返り値としてkeyを返す\r\n\t\t} else {\r\n\t\t\tfor (const i of key) {\r\n\t\t\t\tprocess.stdout.write(\"*\");\r\n\t\t\t}\r\n\t\t\tresolve(key);//promiseの返り値としてkeyを返す\r\n\t\t}\r\n\t};\r\n\tstdin.setRawMode(true);//エンター以外の各キーを押したときもstdin.onを実行するようにする\r\n\tstdin.resume();//標準入力の待機状態にする\r\n\tstdin.on(\"data\", callBack);//キー入力を受け取る。キー内容はコールバック関数の第一引数として渡される\r\n});\r\n\r\n\r\n// 標準入力の受け取り\r\nasync function input(prompt, ishide = false) {\r\n\tif (ishide === false) {\r\n\t\t//readlineの入出力インターフェースを指定\r\n\t\tconst readInterface = (0,readline__WEBPACK_IMPORTED_MODULE_0__.createInterface)({\r\n\t\t\tinput: process.stdin,\r\n\t\t\toutput: process.stdout,\r\n\t\t});\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\treadInterface.question(prompt, (input) => {\r\n\t\t\t\treadInterface.close();\r\n\t\t\t\tresolve(input);\r\n\t\t\t});\r\n\t\t});\r\n\t} else if (ishide === true) {\r\n\t\tlet key = \"\";\r\n\t\tprocess.stdout.write(prompt);\r\n\t\tlet str = \"\";\r\n\t\t//ENTARキーが押されるまでforループ\r\n\t\tfor (; ;) {\r\n\t\t\tkey = await inputKey();//入力したキーを孵す\r\n\t\t\t// console.log(key.charCodeAt(0));\r\n\t\t\t//ヌル文字～ユニット区切り文字は許さない\r\n\t\t\tif (key.charCodeAt(0) - 31 <= 0 && //ヌル文字～まで\r\n\t\t\t\t(key.charCodeAt(0) !== 13 && //スペース\r\n\t\t\t\t\tkey.charCodeAt(0) !== 8 && //バックスペース\r\n\t\t\t\t\tkey.charCodeAt(0) !== 3\t //Ctrl+C\r\n\t\t\t\t)) {\r\n\t\t\t\tprocess.stdout.write(nowrite);\r\n\t\t\t}\r\n\t\t\t//ENTERキーが押されたら終了\r\n\t\t\tif (key === \"\\x0d\") {\r\n\t\t\t\tprocess.stdout.write(nowrite);\r\n\t\t\t\tconsole.log();\r\n\t\t\t\treturn str;\r\n\t\t\t}\r\n\t\t\tif (key === CtrlC) {\r\n\t\t\t\tprocess.stdout.write(nowrite);\r\n\t\t\t\tprocess.exit(-1);//Ctrl+Cでプロセスの終了\r\n\t\t\t}\r\n\t\t\t//バックスペースが押されたとき\r\n\t\t\tif (key === \"\\b\") {\r\n\t\t\t\tif (str !== \"\") {\r\n\t\t\t\t\t//二文字消去して一つ前の入力も消去\r\n\t\t\t\t\tprocess.stdout.write(erathe);\r\n\t\t\t\t\tstr = str.slice(0, str.length - 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprocess.stdout.write(nowrite);\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t//タブが押されたとき\r\n\t\t\tif (key === \"\\t\") {\r\n\t\t\t\t//一文字消去して何もさせない\r\n\t\t\t\t// process.stdout.write(nowrite);\r\n\t\t\t\tkey = \"\";\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tstr += key;\r\n\t\t}\r\n\t}\r\n};\r\n\n\n//# sourceURL=webpack://sus_login/./util/input.js?");

/***/ }),

/***/ "./util/makeSchedule.js":
/*!******************************!*\
  !*** ./util/makeSchedule.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeSchedule: () => (/* binding */ makeSchedule)\n/* harmony export */ });\n/* harmony import */ var puppeteer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! puppeteer */ \"puppeteer\");\n/* harmony import */ var _today_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./today.js */ \"./util/today.js\");\n/* harmony import */ var _control_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control.js */ \"./util/control.js\");\n\r\n/* \r\n\t[makeSchedule関数]\r\n\tsclassの学生時間割を参照して、その人が履修している科目の科目コードから、solaの科目ページurlを取得し、sola_link.jsonを作成\r\n*/\r\n\r\n //pupeteerのインポート\r\n\r\n\r\n\r\n/* sleep関数 */\r\nconst sleep = msec => new Promise(resolve => setTimeout(resolve, msec));\r\n\r\nasync function makeSchedule(data) {\r\n\tdata.last_upd = { year: _today_js__WEBPACK_IMPORTED_MODULE_1__.today.year, month: _today_js__WEBPACK_IMPORTED_MODULE_1__.today.month, date: _today_js__WEBPACK_IMPORTED_MODULE_1__.today.date,value:_today_js__WEBPACK_IMPORTED_MODULE_1__.today.value,lastterm:_today_js__WEBPACK_IMPORTED_MODULE_1__.today.whichTerm()};\r\n\t/* ブラウザの立ち上げ */\r\n\tconst browser = await (0,puppeteer__WEBPACK_IMPORTED_MODULE_0__.launch)({\r\n\t\t// headless: false, //ヘッドレス(ブラウザの表示・非表示)の設定。falseなら表示\r\n\t\theadless: \"new\", //ヘッドレス(ブラウザの表示・非表示)の設定。falseなら表示\r\n\t\tslowMo: 5, //タイピング・クリックなどの各動作間の速度\r\n\t\tdefaultViewport: null, //ブラウザサイズとviewportがずれる不具合の防止\r\n\t\tchannel: \"chrome\",//chromeを探し出して開く\r\n\t});\r\n\ttry {\r\n\t\tconst sclass_schedule = await searchSclass(browser, data);\r\n\t\tconst marge_schedule = await searchSola(browser, data, sclass_schedule);\r\n\t\tconsole.log(\"履修科目データの登録が完了しました\");\r\n\t\treturn marge_schedule;\r\n\t}catch (e){\r\n\t\tthrow e;\r\n\t}\r\n}\r\n\r\nasync function searchSclass(browser, data) {\r\n\tconst info = data.sclass; //sclassのデータを取得\r\n\tconst user_name = data.username;\r\n\tconst password = data.password;\r\n\r\n\tconst page = await browser.newPage();//新規ページを作成\r\n\r\n\tconst url = info.url; //sclassのurl\r\n\r\n\t// CSSをOFFにして高速化\r\n\tawait page.setRequestInterception(true);\r\n\tpage.on('request', (request) => {\r\n\t\tif (['image', 'stylesheet', 'font', 'script'].indexOf(request.resourceType()) !== -1) {\r\n\t\t\trequest.abort();\r\n\t\t} else {\r\n\t\t\trequest.continue();\r\n\t\t}\r\n\t});\r\n\ttry {\r\n\t\tawait page.goto(url, { waitUntil: 'load', timeout: 0 }); //sclassに遷移\r\n\r\n\t\tconst target_name_ID = info.target.name;//username入力要素のID\r\n\t\tconst target_pass_ID = info.target.pass;//password入力要素のID\r\n\t\tconst target_submit_ID = info.target.submit;//submitボタンのID\r\n\r\n\t\t(await browser.pages())[0].close();\r\n\t\tawait page.waitForSelector(target_submit_ID, { timeout: 10000 });\r\n\t\tawait page.click(target_submit_ID);//submitクリック\r\n\t\tawait page.waitForSelector(target_name_ID, { timeout: 10000 });\r\n\t\tawait page.type(target_name_ID, user_name);//username入力\r\n\t\tawait page.waitForSelector(target_pass_ID, { timeout: 10000 });\r\n\t\tawait page.type(target_pass_ID, password);//password入力\r\n\t\tawait Promise.all([\r\n\t\t\tpage.waitForSelector(target_submit_ID, { timeout: 10000 }),\r\n\t\t\tpage.click(target_submit_ID)//submitクリック\r\n\t\t]);\r\n\t\tconsole.log(\"sclassログイン完了\");\r\n\t\tconst target_risyuu_ID = \"div#pmenu4\"; //sclassの上のバーの「履修関連」\r\n\r\n\t\tawait page.evaluate(() => { window.scroll(0, 0); });\r\n\t\tawait page.waitForSelector(target_risyuu_ID, { visible: true, timeout: 10000 });\r\n\t\tawait page.hover(target_risyuu_ID);//「履修関連」をホバー\r\n\t\tconst target_studentSchedule_ID = await page.$eval(target_risyuu_ID,(div)=>{\r\n\t\t\treturn `#${Array.from(div.children).filter((c) => c.text === \"学生時間割表\")[0].id}`\r\n\t\t});\r\n\t\tawait page.waitForSelector(target_studentSchedule_ID, { visible: true, timeout: 10000 });\r\n\t\tawait page.click(target_studentSchedule_ID, { delay: 1000 });//授業時間割をクリック\r\n\t\tconst target_select_viewstyle_ID = \"select#form1\\\\3A HyojiKeishiki\"; //表示形式選択のID\r\n\t\tconst target_select_term_ID = \"select#form1\\\\3A htmlGakki\"\r\n\t\tconst target_search_ID = \"input#form1\\\\3A search\";//検索ボタンのID\r\n\r\n\t\tawait page.waitForSelector(target_select_viewstyle_ID, { visible: true, timeout: 10000 });\r\n\t\tawait page.select(target_select_viewstyle_ID, \"1\");//一覧形式の選択\r\n\t\tawait page.select(target_select_term_ID, \"0\");//一覧形式の選択\r\n\t\tawait page.click(target_search_ID);//submitをクリック\r\n\r\n\t\t//一覧形式のtableの表示を待つ\r\n\t\tconst table_list_bf_ID = \"table#form1\\\\3A standardJugyoTimeSchedule00List\";\r\n\t\tawait page.waitForSelector(table_list_bf_ID, { visible: true, timeout: 10000 });\r\n\t\t//一覧形式のtableの表示を待つ\r\n\t\tconst table_list_af_ID = \"table#form1\\\\3A standardJugyoTimeSchedule01List\";\r\n\t\tawait page.waitForSelector(table_list_af_ID, { visible: true, timeout: 10000 });\r\n\r\n\t\tasync function evalSUS(classname, page) {\r\n\t\t\tconst path_bf = `table#form1\\\\3A standardJugyoTimeSchedule00List td.${classname} span`;\r\n\t\t\tconst path_af = `table#form1\\\\3A standardJugyoTimeSchedule01List td.${classname} span`;\r\n\t\t\treturn {\r\n\t\t\t\t\"bf\": Array.from(new Set(\r\n\t\t\t\t\tawait page.$$eval(path_bf, (tds) => {\r\n\t\t\t\t\t\treturn tds.map(data => data.textContent)\r\n\t\t\t\t\t})\r\n\t\t\t\t)),\r\n\t\t\t\t\"af\": Array.from(new Set(\r\n\t\t\t\t\tawait page.$$eval(path_af, (tds) => {\r\n\t\t\t\t\t\treturn tds.map(data => data.textContent)\r\n\t\t\t\t\t})\r\n\t\t\t\t))\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// //授業コードを取得\r\n\t\tlet class_code = await evalSUS(\"jugyoCd\", page);\r\n\r\n\t\t// //授業名を取得\r\n\t\tlet class_name = await evalSUS(\"jugyoMei\", page);\r\n\r\n\t\tlet schedule = { bf: [], af: [] };\r\n\r\n\r\n\t\t//前期分を整形してScheduleに格納\r\n\t\tfor (let i = 0; i < class_code.bf.length; i++) {\r\n\t\t\tschedule.bf.push({\r\n\t\t\t\tcode: class_code.bf[i],\r\n\t\t\t\tname: class_name.bf[i].replace(/ (.*?) .*/g, \"$1\").replace('\\t', \"\")\r\n\t\t\t});\r\n\t\t}\r\n\t\t//後期分を整形してScheduleに格納\r\n\t\tfor (let i = 0; i < class_code.af.length; i++) {\r\n\t\t\tschedule.af.push({\r\n\t\t\t\tcode: class_code.af[i],\r\n\t\t\t\tname: class_name.af[i].replace(/ (.*?) .*/g, \"$1\").replace('\\t', \"\")\r\n\t\t\t});\r\n\t\t}\r\n\t\tconsole.log(_control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_green+\"履修科目コード及び科目名取得完了\"+_control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_reset);\r\n\t\tconsole.log(\"続いて、SOLAから科目ページリンクの取得を行います\");\r\n\t\treturn schedule;\r\n\t} catch (e) {\r\n\t\tconsole.log(e)\r\n\t\tthrow new Error(_control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_red + \"[保存] データの保存に失敗しました。暗号化にバグが生じている可能性があるため、暇なときにでも佐野まで報告してもらえると助かります(笑)\" + _control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_reset);\r\n\t}\r\n}\r\n\r\nasync function searchSola(browser, data, schedule) {\r\n\tconst info = data.sola; //dataからsolaの情報を取得\r\n\tconst user_name = data.username;\r\n\tconst password = data.password;\r\n\r\n\r\n\tconst page = await browser.newPage();//新規ページを作成\r\n\tconst url = \"https://sola.sus.ac.jp\"//solaのurl\r\n\tawait page.goto(url, { waitUntil: 'domcontentloaded', timeout: 0 });//ページ遷移\r\n\r\n\tconst target_name_ID = info.target.name; //username入力要素のID\r\n\tconst target_pass_ID = info.target.pass; //password入力要素のID\r\n\tconst target_submit_ID = info.target.submit; //submitボタンのID\r\n\tconst target_a_ID = \"a#a-2\"; //solaのリンクのID\r\n\r\n\tconst pages = await browser.pages(); //ページリスト取得(Exitcポータルの削除のため)\r\n\tawait pages[0].close();//about:brankを削除\r\n\r\n\tawait page.waitForSelector(target_name_ID, { visible: true, timeout: 30000 });\r\n\tawait page.type(target_name_ID, user_name);//username入力\r\n\tawait page.click(target_submit_ID);//submitクリック\r\n\tawait page.waitForSelector(target_pass_ID, { visible: true, timeout: 30000 });\r\n\tawait page.type(target_pass_ID, password);//password入力\r\n\tawait page.click(target_pass_ID, { delay: 800 });//passwordクリック(確実にsubmitするため)\r\n\tawait page.click(target_submit_ID);//submitクリック\r\n\r\n\tconst SOLA = await browser.waitForTarget(async (target) => {\r\n\t\tif (target.url() === \"https://sola.sus.ac.jp/\") {\r\n\t\t\treturn target;\r\n\t\t}\r\n\t});\r\n\tconsole.log(\"SOLAログイン完了\");\r\n\t// ここからSOLAが開かれたあとの処理\r\n\r\n\tawait Promise.all(\r\n\t\tschedule.bf.map(async (t, i) => {\r\n\t\t\tawait sleep(i * 800);\r\n\t\t\tt.url = await sola_scrp(browser, t);\r\n\t\t})\r\n\t);\r\n\tconsole.log(_control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_green + \"前期科目ページURL取得完了\" + _control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_reset);\r\n\tawait Promise.all(\r\n\t\tschedule.af.map(async (t, i) => {\r\n\t\t\tawait sleep(i * 800);\r\n\t\t\tt.url = await sola_scrp(browser, t);\r\n\t\t})\r\n\t);\r\n\tconsole.log(_control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_green + \"後期科目ページURL取得完了\" + _control_js__WEBPACK_IMPORTED_MODULE_2__.control.fg_reset);\r\n\tawait browser.close();\r\n\r\n\treturn schedule;\r\n}\r\n\r\nasync function sola_scrp(browser, data) {\r\n\t//cssを非表示\r\n\tconst page2 = await browser.newPage();\r\n\tawait page2.setRequestInterception(true);\r\n\tpage2.on('request', (request) => {\r\n\t\tif (['image', 'stylesheet', 'font'].indexOf(request.resourceType()) !== -1) {\r\n\t\t\trequest.abort();\r\n\t\t} else {\r\n\t\t\trequest.continue();\r\n\t\t}\r\n\t});\r\n\t//solaに飛ぶ\r\n\tawait page2.goto(\"https://sola.sus.ac.jp/course/search.php?areaids=core_course-course&q=\" + data.code, { waitUntil: 'domcontentloaded', timeout: 0 });\r\n\t\r\n\tawait page2.waitForSelector(\"div.last a.aalink\", { visible: true, timeout: 2000 }).catch(() => {\r\n\t\treturn \"https://sola.sus.ac.jp/\";\r\n\t});\r\n\t\r\n\t//aのhrefから一番下にあるやつをとってくる\r\n\tconst url = await page2.$eval(\"div.last a.aalink\", (tar) => {\r\n\t\t//通年科目とかの年度名が書いてあるかどうか\r\n\t\treturn tar.href;\r\n\t}).catch(() => {\r\n\t\t//URLが存在しなかったらSOLAのページへ\r\n\t\treturn \"https://sola.sus.ac.jp/\";\r\n\t});\r\n\tconst nend = await page2.$eval(\"div.last a.aalink\", (tar) => {\r\n\t\t//通年科目とかの年度名が書いてあるかどうか\r\n\t\treturn parseInt(tar.textContent.match(/[0-9][0-9]_/)[0].replace(/_/, \"\"));\r\n\t}).catch(() => {\r\n\t\treturn null;\r\n\t});\r\n\tawait page2.close();\r\n\t// console.log(nend + \",\" + today.getNend());\r\n\tif (nend === null || nend === _today_js__WEBPACK_IMPORTED_MODULE_1__.today.getNend()) {\r\n\t\t//年度が同じなら\r\n\t\tconsole.log(url);\r\n\t\treturn url;\r\n\t} else if (nend !== _today_js__WEBPACK_IMPORTED_MODULE_1__.today.getNend()) {\r\n\t\t//年度が違ったら\r\n\t\treturn \"https://sola.sus.ac.jp/\";\r\n\t}\r\n}\n\n//# sourceURL=webpack://sus_login/./util/makeSchedule.js?");

/***/ }),

/***/ "./util/pause.js":
/*!***********************!*\
  !*** ./util/pause.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pause: () => (/* binding */ pause)\n/* harmony export */ });\nprocess.stdin.setEncoding('utf8');\r\nconst CtrlC = \"\\u0003\";\r\nconst erathe = \"\\b\\b\\x1b[0K\";\r\nconst nowrite = \"\\b\\x1b[0K\";\r\n\r\nconst inputKey = (prompt) => new Promise(resolve => {\r\n\tconst stdin = process.stdin;\r\n\tconst isRow = stdin.isRaw;\r\n\tconst callBack = (key = \"\") => {\r\n\t\tstdin.off(\"data\", callBack);\r\n\t\tstdin.pause();\r\n\t\tstdin.setRawMode(isRow);\r\n\t\t//上キーとかのエスケープで始まる文字は非表示\r\n\t\tif (key === \"\\x0d\" || key === CtrlC) {\r\n\t\t\tresolve(key);//promiseの返り値としてkeyを返す\r\n\t\t} else {\r\n\t\t\tresolve(\"\");\r\n\t\t}\r\n\t};\r\n\tstdin.setRawMode(true);//エンター以外の各キーを押したときもstdin.onを実行するようにする\r\n\tstdin.resume();//標準入力の待機状態にする\r\n\tstdin.on(\"data\", callBack);//キー入力を受け取る。キー内容はコールバック関数の第一引数として渡される\r\n});\r\n\r\n\r\n// エンター待機\r\nasync function pause(mode=\"exit\",prompt=\"[何かキーを押して終了します]\") {\r\n\tlet key = \"\";\r\n\tprocess.stdout.write(`${prompt}\\n`);\r\n\t//ENTARキーが押されるまでforループ\r\n\tfor (; ;) {\r\n\t\tkey = await inputKey();//入力したキーを返す\r\n\t\tif (key === \"\") {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t//ENTERキーが押されたら終了\r\n\t\tif (key === \"\\x0d\") {\r\n\t\t\tprocess.stdout.write(nowrite);\r\n\t\t\tconsole.log();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tif (key === CtrlC) {\r\n\t\t\t// process.stdout.write(nowrite);\r\n\t\t\tprocess.exit(-1);//Ctrl+Cでプロセスの終了\r\n\t\t}\r\n\t}\r\n\tif (mode === \"exit\"){\r\n\t\tprocess.exit(0);\r\n\t}else if(mode === \"pass\"){\r\n\t\treturn 0;\r\n\t}else{\r\n\t\tthrow new Error(\"modeはpassかexitで設定してください\")\r\n\t}\r\n}\r\n\n\n//# sourceURL=webpack://sus_login/./util/pause.js?");

/***/ }),

/***/ "./util/reset.js":
/*!***********************!*\
  !*** ./util/reset.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reset: () => (/* binding */ reset)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n\r\n\r\n/*\r\n\t[reset.js]\r\n\tinfo.jsonをリセットする\r\n*/\r\n\r\n\r\nasync function reset(path) {\r\n\t//info.jsonのテンプレ\r\n\tconst info_json_raw = {\r\n\t\t\"username\": \"\",\r\n\t\t\"password\": \"\",\r\n\t\t\"sclass\": {\r\n\t\t\t\"url\": \"https://s-class.admin.sus.ac.jp/up/faces/login/Com00504A.jsp\",\r\n\t\t\t\"target\": {\r\n\t\t\t\t\"name\": \".inputText\",\r\n\t\t\t\t\"pass\": \".inputSecret\",\r\n\t\t\t\t\"submit\": \"input[type=image]\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"sola\": {\r\n\t\t\t\"url\": \"https://sola.sus.ac.jp/\",\r\n\t\t\t\"target\": {\r\n\t\t\t\t\"name\": \"#identifier\",\r\n\t\t\t\t\"pass\": \"#password\",\r\n\t\t\t\t\"submit\": \"button[type=submit]\",\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"last_upd\": \"\"\r\n\t};\r\n\r\n\ttry {\r\n\t\t(0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(path, JSON.stringify(info_json_raw));//info.jsonの初期化\r\n\t\treturn \"done\"\r\n\t}catch (e){\r\n\t\tthrow \"fault\"\r\n\t}\r\n}\n\n//# sourceURL=webpack://sus_login/./util/reset.js?");

/***/ }),

/***/ "./util/today.js":
/*!***********************!*\
  !*** ./util/today.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   today: () => (/* binding */ today)\n/* harmony export */ });\n\r\n/* \r\n\t[today.js]\r\n\t日付関連をまとめたモジュール。年度の判定なども行う。\r\n*/\r\n\r\nconst today = {\r\n\tvalue:new Date().valueOf(),\r\n\tyear: new Date().getFullYear(),\r\n\tmonth: new Date().getMonth()+1,\r\n\tdate: new Date().getDate(),\r\n\thour: new Date().getHours(),\r\n\tminute: new Date().getMinutes(),\r\n\tsec: new Date().getSeconds(),\r\n\tyearl2d: parseInt(new Date().getFullYear()).toString().slice(-2),\r\n\tgetToday: function getToday() {\r\n\t\treturn `${this.year}-${this.month.toString().padStart(2, '0')}-${this.date.toString().padStart(2, '0')}-${this.hour.toString().padStart(2, '0')}-${this.minute.toString().padStart(2, '0')}-${this.sec.toString().padStart(2, '0')}`\r\n\t},\r\n\tgetTodayJP: function getToday() {\r\n\t\treturn `${this.year}年${this.month.toString().padStart(2, '0')}月${this.date.toString().padStart(2, '0')}日${this.hour.toString().padStart(2, '0')}時${this.minute.toString().padStart(2, '0')}分${this.sec.toString().padStart(2, '0')}秒`\r\n\t},\r\n\tgetNend : function getNend() {\r\n\t\tlet nend = this.year;\r\n\t\tif (1 <= this.month && this.month <=3) {\r\n\t\t\tnend--;\r\n\t\t} \r\n\t\treturn parseInt(nend.toString().slice(-2));\r\n\t},\r\n\t//前期か後期か\r\n\twhichTerm:function whichTerm() {\r\n\t\tif ( this.month >= 4 && this.month <= 9) {\r\n\t\t\treturn \"bf\"; //4月から9月の間はbf(前期)\r\n\t\t} else {\r\n\t\t\treturn \"af\"; //10月から3月の間はaf(後期)\r\n\t\t}\r\n\t},\r\n\t//学期始まりか否か\r\n\tisStartNend: function isStartNend(lastUpdate={year:0,month:0,hour:0,value:0,lastterm:\"\"}){\r\n\t\tconst half_year_msec = 2629800000 * 6;\r\n\t\tconst newValue = this.value;\r\n\t\tconst oldValue = lastUpdate.value;\r\n\t\t//最終更新から6ヶ月以上が過ぎたときや、最終更新のときと学期が違うときに更新\r\n\t\tif (newValue - oldValue >= half_year_msec){\r\n\t\t\treturn true;\r\n\t\t}else return lastUpdate.lastterm !== this.whichTerm();\r\n\r\n\t}\r\n}\n\n//# sourceURL=webpack://sus_login/./util/today.js?");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"name\":\"sus_login\",\"version\":\"4.5.9\",\"description\":\"\",\"main\":\"main.js\",\"keywords\":[],\"scripts\":{\"build\":\"webpack --mode production && npm run pkg\",\"start dev\":\"webpack --mode development && node sus_login_v%npm_package_version%_main.cjs\",\"dev\":\"webpack --mode development\",\"pkg_not\":\"nexe sus_login_v%npm_package_version%_main.cjs -o ./dist/SUS_Login_v%npm_package_version%.exe --ico ./star_icon.ico --verbose --enableNodeCli --build\",\"pkg\":\"node nexe_complie.js\",\"test\":\"%npm_package_version% && exit 1\",\"version\":\"webpack -v\",\"watch\":\"webpack --mode development --watch\"},\"author\":\"Tomoya Sano\",\"license\":\"ISC\",\"dependencies\":{\"crypto-js\":\"^4.1.1\",\"nexe\":\"^4.0.0-rc.2\",\"puppeteer\":\"^19.9.1\",\"puppeteer-cluster\":\"^0.23.0\",\"rcedit\":\"^4.0.0\",\"readline-promises\":\"^1.3.1\",\"webpack\":\"^5.88.2\",\"webpack-cli\":\"^5.1.4\",\"webpack-node-externals\":\"^3.0.0\"},\"devDependencies\":{\"electron-packager\":\"^17.1.1\",\"node\":\"^20.3.0\"},\"type\":\"module\"}');\n\n//# sourceURL=webpack://sus_login/./package.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;